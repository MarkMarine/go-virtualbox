// Automatically generated by MockGen. DO NOT EDIT!
// Source: machine_interface.go

package mock_virtualbox

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of Machine interface
type MockMachine struct {
	ctrl     *gomock.Controller
	recorder *_MockMachineRecorder
}

// Recorder for MockMachine (not exported)
type _MockMachineRecorder struct {
	mock *MockMachine
}

func NewMockMachine(ctrl *gomock.Controller) *MockMachine {
	mock := &MockMachine{ctrl: ctrl}
	mock.recorder = &_MockMachineRecorder{mock}
	return mock
}

func (_m *MockMachine) EXPECT() *_MockMachineRecorder {
	return _m.recorder
}

func (_m *MockMachine) Refresh() error {
	ret := _m.ctrl.Call(_m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMachineRecorder) Refresh() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Refresh")
}

func (_m *MockMachine) Start() error {
	ret := _m.ctrl.Call(_m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMachineRecorder) Start() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start")
}

func (_m *MockMachine) Save() error {
	ret := _m.ctrl.Call(_m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMachineRecorder) Save() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Save")
}

func (_m *MockMachine) Pause() error {
	ret := _m.ctrl.Call(_m, "Pause")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMachineRecorder) Pause() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Pause")
}

func (_m *MockMachine) Stop() error {
	ret := _m.ctrl.Call(_m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMachineRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stop")
}

func (_m *MockMachine) Poweroff() error {
	ret := _m.ctrl.Call(_m, "Poweroff")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMachineRecorder) Poweroff() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Poweroff")
}

func (_m *MockMachine) Restart() error {
	ret := _m.ctrl.Call(_m, "Restart")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMachineRecorder) Restart() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Restart")
}

func (_m *MockMachine) Reset() error {
	ret := _m.ctrl.Call(_m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMachineRecorder) Reset() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reset")
}

func (_m *MockMachine) Delete() error {
	ret := _m.ctrl.Call(_m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMachineRecorder) Delete() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete")
}

func (_m *MockMachine) Modify() error {
	ret := _m.ctrl.Call(_m, "Modify")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMachineRecorder) Modify() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Modify")
}

func (_m *MockMachine) AddNATPF(n int, name string, rule PFRule) error {
	ret := _m.ctrl.Call(_m, "AddNATPF", n, name, rule)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMachineRecorder) AddNATPF(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddNATPF", arg0, arg1, arg2)
}

func (_m *MockMachine) DelNATPF(n int, name string) error {
	ret := _m.ctrl.Call(_m, "DelNATPF", n, name)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMachineRecorder) DelNATPF(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DelNATPF", arg0, arg1)
}

func (_m *MockMachine) SetNIC(n int, nic NIC) error {
	ret := _m.ctrl.Call(_m, "SetNIC", n, nic)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMachineRecorder) SetNIC(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetNIC", arg0, arg1)
}

func (_m *MockMachine) AddStorageCtl(name string, ctl StorageController) error {
	ret := _m.ctrl.Call(_m, "AddStorageCtl", name, ctl)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMachineRecorder) AddStorageCtl(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddStorageCtl", arg0, arg1)
}

func (_m *MockMachine) DelStorageCtl(name string) error {
	ret := _m.ctrl.Call(_m, "DelStorageCtl", name)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMachineRecorder) DelStorageCtl(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DelStorageCtl", arg0)
}

func (_m *MockMachine) AttachStorage(ctlName string, medium StorageMedium) error {
	ret := _m.ctrl.Call(_m, "AttachStorage", ctlName, medium)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMachineRecorder) AttachStorage(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AttachStorage", arg0, arg1)
}

func (_m *MockMachine) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockMachineRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Name")
}

func (_m *MockMachine) UUID() string {
	ret := _m.ctrl.Call(_m, "UUID")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockMachineRecorder) UUID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UUID")
}

func (_m *MockMachine) State() MachineState {
	ret := _m.ctrl.Call(_m, "State")
	ret0, _ := ret[0].(MachineState)
	return ret0
}

func (_mr *_MockMachineRecorder) State() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "State")
}

func (_m *MockMachine) CPUs() uint {
	ret := _m.ctrl.Call(_m, "CPUs")
	ret0, _ := ret[0].(uint)
	return ret0
}

func (_mr *_MockMachineRecorder) CPUs() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CPUs")
}

func (_m *MockMachine) Memory() uint {
	ret := _m.ctrl.Call(_m, "Memory")
	ret0, _ := ret[0].(uint)
	return ret0
}

func (_mr *_MockMachineRecorder) Memory() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Memory")
}

func (_m *MockMachine) VRAM() uint {
	ret := _m.ctrl.Call(_m, "VRAM")
	ret0, _ := ret[0].(uint)
	return ret0
}

func (_mr *_MockMachineRecorder) VRAM() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VRAM")
}

func (_m *MockMachine) CfgFile() string {
	ret := _m.ctrl.Call(_m, "CfgFile")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockMachineRecorder) CfgFile() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CfgFile")
}

func (_m *MockMachine) BaseFolder() string {
	ret := _m.ctrl.Call(_m, "BaseFolder")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockMachineRecorder) BaseFolder() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BaseFolder")
}

func (_m *MockMachine) OSType() string {
	ret := _m.ctrl.Call(_m, "OSType")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockMachineRecorder) OSType() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OSType")
}

func (_m *MockMachine) Flag() Flag {
	ret := _m.ctrl.Call(_m, "Flag")
	ret0, _ := ret[0].(Flag)
	return ret0
}

func (_mr *_MockMachineRecorder) Flag() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Flag")
}

func (_m *MockMachine) BootOrder() []string {
	ret := _m.ctrl.Call(_m, "BootOrder")
	ret0, _ := ret[0].([]string)
	return ret0
}

func (_mr *_MockMachineRecorder) BootOrder() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BootOrder")
}

func (_m *MockMachine) SetName(_param0 string) {
	_m.ctrl.Call(_m, "SetName", _param0)
}

func (_mr *_MockMachineRecorder) SetName(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetName", arg0)
}

func (_m *MockMachine) SetUUID(_param0 string) {
	_m.ctrl.Call(_m, "SetUUID", _param0)
}

func (_mr *_MockMachineRecorder) SetUUID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetUUID", arg0)
}

func (_m *MockMachine) SetState(_param0 MachineState) {
	_m.ctrl.Call(_m, "SetState", _param0)
}

func (_mr *_MockMachineRecorder) SetState(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetState", arg0)
}

func (_m *MockMachine) SetCPUs(_param0 uint) {
	_m.ctrl.Call(_m, "SetCPUs", _param0)
}

func (_mr *_MockMachineRecorder) SetCPUs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetCPUs", arg0)
}

func (_m *MockMachine) SetMemory(_param0 uint) {
	_m.ctrl.Call(_m, "SetMemory", _param0)
}

func (_mr *_MockMachineRecorder) SetMemory(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMemory", arg0)
}

func (_m *MockMachine) SetVRAM(_param0 uint) {
	_m.ctrl.Call(_m, "SetVRAM", _param0)
}

func (_mr *_MockMachineRecorder) SetVRAM(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetVRAM", arg0)
}

func (_m *MockMachine) SetCfgFile(_param0 string) {
	_m.ctrl.Call(_m, "SetCfgFile", _param0)
}

func (_mr *_MockMachineRecorder) SetCfgFile(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetCfgFile", arg0)
}

func (_m *MockMachine) SetBaseFolder(_param0 string) {
	_m.ctrl.Call(_m, "SetBaseFolder", _param0)
}

func (_mr *_MockMachineRecorder) SetBaseFolder(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBaseFolder", arg0)
}

func (_m *MockMachine) SetOSType(_param0 string) {
	_m.ctrl.Call(_m, "SetOSType", _param0)
}

func (_mr *_MockMachineRecorder) SetOSType(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetOSType", arg0)
}

func (_m *MockMachine) SetFlag(_param0 Flag) {
	_m.ctrl.Call(_m, "SetFlag", _param0)
}

func (_mr *_MockMachineRecorder) SetFlag(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetFlag", arg0)
}

func (_m *MockMachine) SetBootOrder(_param0 []string) {
	_m.ctrl.Call(_m, "SetBootOrder", _param0)
}

func (_mr *_MockMachineRecorder) SetBootOrder(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBootOrder", arg0)
}
